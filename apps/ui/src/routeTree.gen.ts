/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TransfersImport } from './routes/transfers'
import { Route as LoginImport } from './routes/login'
import { Route as AccountsImport } from './routes/accounts'
import { Route as IndexImport } from './routes/index'
import { Route as CustomersCreateImport } from './routes/customers_/create'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
	id: '/about',
	path: '/about',
	getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const TransfersRoute = TransfersImport.update({
	id: '/transfers',
	path: '/transfers',
	getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
	id: '/login',
	path: '/login',
	getParentRoute: () => rootRoute,
} as any)

const AccountsRoute = AccountsImport.update({
	id: '/accounts',
	path: '/accounts',
	getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRoute,
} as any)

const CustomersCreateRoute = CustomersCreateImport.update({
	id: '/customers_/create',
	path: '/customers/create',
	getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof IndexImport
			parentRoute: typeof rootRoute
		}
		'/accounts': {
			id: '/accounts'
			path: '/accounts'
			fullPath: '/accounts'
			preLoaderRoute: typeof AccountsImport
			parentRoute: typeof rootRoute
		}
		'/login': {
			id: '/login'
			path: '/login'
			fullPath: '/login'
			preLoaderRoute: typeof LoginImport
			parentRoute: typeof rootRoute
		}
		'/transfers': {
			id: '/transfers'
			path: '/transfers'
			fullPath: '/transfers'
			preLoaderRoute: typeof TransfersImport
			parentRoute: typeof rootRoute
		}
		'/about': {
			id: '/about'
			path: '/about'
			fullPath: '/about'
			preLoaderRoute: typeof AboutLazyImport
			parentRoute: typeof rootRoute
		}
		'/customers_/create': {
			id: '/customers_/create'
			path: '/customers/create'
			fullPath: '/customers/create'
			preLoaderRoute: typeof CustomersCreateImport
			parentRoute: typeof rootRoute
		}
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute
	'/accounts': typeof AccountsRoute
	'/login': typeof LoginRoute
	'/transfers': typeof TransfersRoute
	'/about': typeof AboutLazyRoute
	'/customers/create': typeof CustomersCreateRoute
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute
	'/accounts': typeof AccountsRoute
	'/login': typeof LoginRoute
	'/transfers': typeof TransfersRoute
	'/about': typeof AboutLazyRoute
	'/customers/create': typeof CustomersCreateRoute
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	'/': typeof IndexRoute
	'/accounts': typeof AccountsRoute
	'/login': typeof LoginRoute
	'/transfers': typeof TransfersRoute
	'/about': typeof AboutLazyRoute
	'/customers_/create': typeof CustomersCreateRoute
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths:
		| '/'
		| '/accounts'
		| '/login'
		| '/transfers'
		| '/about'
		| '/customers/create'
	fileRoutesByTo: FileRoutesByTo
	to:
		| '/'
		| '/accounts'
		| '/login'
		| '/transfers'
		| '/about'
		| '/customers/create'
	id:
		| '__root__'
		| '/'
		| '/accounts'
		| '/login'
		| '/transfers'
		| '/about'
		| '/customers_/create'
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute
	AccountsRoute: typeof AccountsRoute
	LoginRoute: typeof LoginRoute
	TransfersRoute: typeof TransfersRoute
	AboutLazyRoute: typeof AboutLazyRoute
	CustomersCreateRoute: typeof CustomersCreateRoute
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AccountsRoute: AccountsRoute,
	LoginRoute: LoginRoute,
	TransfersRoute: TransfersRoute,
	AboutLazyRoute: AboutLazyRoute,
	CustomersCreateRoute: CustomersCreateRoute,
}

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/accounts",
        "/login",
        "/transfers",
        "/about",
        "/customers_/create"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/accounts": {
      "filePath": "accounts.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/transfers": {
      "filePath": "transfers.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/customers_/create": {
      "filePath": "customers_/create.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
